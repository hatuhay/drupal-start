#!/usr/bin/env bash

#: exec_target = cli

## Initialize/reinstall site
##
## Usage: fin init-site

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------

# PROJECT_ROOT and DOCROOT are set as env variables in cli
SITE_DIRECTORY="default"
DOCROOT_PATH="${DOCROOT}"
SITEDIR_PATH="${DOCROOT_PATH}/sites/${SITE_DIRECTORY}"

#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
	local source="$1"
	local dest="$2"

	if [[ ! -f $dest ]]; then
		echo "Copying ${dest}..."
		cp $source $dest
	else
		echo "${dest} already in place."
	fi
}

# Creates a folder.
# Skips if the destination folder already exists.
# @param $1 destination folder
make_dir()
{
	local dest="$1"

	if [[ ! -e $dest ]]; then
			mkdir $dest
	fi
}

#-------------------------- END: Helper functions --------------------------------

#-------------------------- Functions --------------------------------

# Initialize local settings files
init_settings ()
{
	# Copy from settings templates
	copy_settings_file ".docksal/settings/settings.local.php" "${SITEDIR_PATH}/settings.local.php"
}

# Fix file/folder permissions
fix_permissions ()
{
	echo "Making site directory writable..."
	chmod 755 "${SITEDIR_PATH}"
}

# Install site
site_install ()
{
	echo "Creating auxiliary folders..."
	make_dir "private"
	make_dir "config"
	cd $DOCROOT_PATH
	make_dir "libraries/bootstrap"
  cp -R -f ../vendor/twbs/bootstrap/dist ./libraries/bootstrap

	# We disable email sending here so site-install does not return an error
	# Credit: https://www.drupal.org/project/phpconfig/issues/1826652#comment-12071700
	drush site-install standard -y \
		install_configure_form.enable_update_status_module=NULL \
		--site-name='My Drupal 9 Site' \
		--db-url=mysql://user:user@db/default \
		--locale=es

}

# Post Install
post_install ()
{
	# We install the barrio subtheme from bootstrap sass starter.
	cd ./themes/contrib/bootstrap_sass
	# Script to quickly create sub-theme.

	echo '
	+------------------------------------------------------------------------+
	| With this script you could quickly create sass_subtheme sub-theme     |
	| In order to use this:                                                  |
	| - sass_subtheme theme (this folder) should be in the contrib folder   |
	+------------------------------------------------------------------------+
	'
	echo 'The machine name of your custom theme? [e.g. mycustom_sass_subtheme]'
	read CUSTOM_BOOTSTRAP_SASS

	echo 'Your theme name ? [e.g. My custom sass_subtheme]'
	read CUSTOM_BOOTSTRAP_SASS_NAME

	if [[ ! -e ../../custom ]]; then
			mkdir ../../custom
	fi
	cd ../../custom
	cp -r ../contrib/bootstrap_sass $CUSTOM_BOOTSTRAP_SASS
	cd $CUSTOM_BOOTSTRAP_SASS
	for file in *bootstrap_sass.*; do mv $file ${file//bootstrap_sass/$CUSTOM_BOOTSTRAP_SASS}; done
	for file in config/*/*bootstrap_sass.*; do mv $file ${file//bootstrap_sass/$CUSTOM_BOOTSTRAP_SASS}; done

	# Remove create_subtheme.sh file, we do not need it in customized subtheme.
	rm scripts/create_subtheme.sh

	# mv {_,}$CUSTOM_BOOTSTRAP_SASS.theme
	grep -Rl bootstrap_sass .|xargs sed -i -e "s/bootstrap_sass/$CUSTOM_BOOTSTRAP_SASS/"
	sed -i -e "s/SASS Bootstrap Starter Kit Subtheme/$CUSTOM_BOOTSTRAP_SASS_NAME/" $CUSTOM_BOOTSTRAP_SASS.info.yml
	echo "# Check the themes/custom folder for your new sub-theme."
	drush en $CUSTOM_BOOTSTRAP_SASS
}
#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------

# Project initialization steps
fix_permissions
init_settings
time site_install
post_install

echo -e "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup."

#-------------------------- END: Execution --------------------------------
